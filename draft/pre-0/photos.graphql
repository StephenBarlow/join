directive @using(spec: using_URL!)
  on SCHEMA

schema @using(spec: "https://specs.apollo.dev/cs/v1") {
  query: Query
}

directive @cs_key(graph: cs_Graph!, key: cs_SelectionSet!)
  repeatable on FRAGMENT_DEFINITION

directive @cs_resolve(
  graph: cs_Graph!,
  requires: cs_SelectionSet,
  provides: cs_SelectionSet)
  on FIELD_DEFINITION

directive @cs_error(
  graphs: [cs_Graph!],
  message: String)
    on OBJECT
     | INTERFACE
     | UNION
     | FIELD_DEFINITION

directive @cs_link(to: cs_OutboundLink!)
  on ENUM_VALUE

input cs_OutboundLink {
  http: cs_OutboundLinkHTTP
}

input cs_OutboundLinkHTTP {
  url: cs_URL
}

enum cs_Graph {
  AUTH @cs_link(to: {
    http: { url: "https://auth.api.example.com" }
  }),
  ALBUMS @cs_link(to: {
    http: { url: "https://albums.api.example.com" }
  }),
  IMAGES @cs_link(to: {
    http: { url: "https://images.api.example.com" }
  }),
}

scalar cs_Never
  @specifiedBy(url: "https://specs.apollo.dev/compose/v1#cs_never")

scalar cs_SelectionSet
  @specifiedBy(url: "https://specs.apollo.dev/compose/v1#cs_selectionset")

scalar cs_URL
  @specifiedBy(url: "https://specs.apollo.dev/compose/v1#cs_url")

type Query {
  me: User        @cs_resolve(graph: AUTH)
  images: [Image] @cs_resolve(graph: IMAGES)
}

type User {
  id: ID              @cs_resolve(graph: AUTH)
  name: String        @cs_resolve(graph: AUTH)
  albums: [Album!]    @cs_resolve(graph: ALBUMS)
  favorite: cs_Never  @cs_error(graphs: [ALBUMS, IMAGES],
                                message: "Field types conflict")
}

fragment User_id on User
 @cs_key(graph: AUTH)
 @cs_key(graph: ALBUMS) {
  id
}

type Album {
  user: User        @cs_resolve(graph: ALBUMS)
  photos: [Image!]  @cs_resolve(graph: ALBUMS)
}

type Image {
  url: Url          @cs_resolve(graph: IMAGES)
  type: MimeType    @cs_resolve(graph: IMAGES)
  albums: [Album!]  @cs_resolve(graph: ALBUMS)
}

fragment Image_url on Image
  @cs_key(graph: IMAGE)
  @cs_key(graph: ALBUMS)
{
  url
}

scalar Url
scalar MimeType