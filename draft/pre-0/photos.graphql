
schema
  @core(using: "https://lib.apollo.dev/core/v1.0")
  @core(using: "https://lib.apollo.dev/join/v1.0")
  @core(using: "https://lib.apollo.dev/error/v1.0")
  @core(using: "https://lib.apollo.dev/ref/v1.0")
{
  query: Query
}


directive @core(using: String!)
  repeatable on SCHEMA

directive @join(
  graph: join__Graph,
  requires: ref__Fragment,
  provides: ref__Fragment)
  on
  | OBJECT
  | INTERFACE
  | FIELD_DEFINITION

directive @error(join: join__Error)
  on
  | OBJECT
  | INTERFACE
  | UNION
  | FIELD_DEFINITION

input join__Error {
  fieldsConflictInSubgraphs: [join__Graph!]!
}

enum join__Graph {
  AUTH,
  ALBUMS,
  IMAGES
}

scalar join__Never
  @specifiedBy(url: "https://specs.apollo.dev/cs/v1.0#join__never")

type Query
  @join(graph: AUTH)
  @join(graph: IMAGES)
{
  me: User        @join(graph: AUTH)
  images: [Image] @join(graph: IMAGES)
}

type User
  @join(graph: AUTH, key: "ref___User_id")
  @join(graph: ALBUMS, key: "ref___User_id")
{
  id: ID                  @join(graph: AUTH)
  name: String            @join(graph: AUTH)
  albums: [Album!]        @join(graph: ALBUMS)
  favorite: join__Never   @error(join: {
                            fieldsConflictInSubgraphs: [ALBUMS, IMAGES]
                          })
}

fragment ref___User_id on User {
  id
}

type Album @join(graph: ALBUMS) {
  user: User
  photos: [Image!]
}

type Image
  @join(graph: ALBUMS, key: "ref___Image_url")
  @join(graph: IMAGES, key: "ref___Image_url")
{
  url: Url          @join(graph: IMAGES)
  type: MimeType    @join(graph: IMAGES)
  albums: [Album!]  @join(graph: ALBUMS)
}

# This fragment is an Image key within the IMAGE
# and ALBUMS graphs.
#
# The fragment name is arbitrary. The only constraint
# is that it must be unique within the document.
fragment ref___Image_url on Image
{
  url
}

scalar Url
scalar MimeType